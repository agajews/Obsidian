import (..testing) ~as tests
import logging showing: (Logger ~as L, showLog ~as showL)
import logging.(Logger ~as L, showLog ~as showL)
import gravity showing: (...)
import gravity.(...)
import swimming hiding: water
import swimming.(...) hiding: water

nothing = nil

name = "John Smith"  # name
occupation = @farmer
num = 3e10
float = 3.0
float = bob
puts "Hello " * 3 + name; puts "Goodbye"

$(unquote)

puts "something {(function call) + "thing" other.thing}!"

(something else)
(something ~else thing)
(something
  (something, (something else))
  (something))
(-> something)

(something)
(something )
(something, else)
(~as)
complicated_array.{0..3, 1..(-1)}
complicated_array.{0..3, 1..@len, @all}

operator assoc: @left priority: 6 {~make} = do
  (stuff)
end

fun (something else) = do
  puts something
  do
    puts "goodbye"
  end
end

if thing ~and thing do
  puts "Hello"
end

let Dog = (class Dog: self.name bark: () => (puts "Woof!"))

let Dog = (record name: String breed: Breed)

let arr = (list x y z)
let arr = [x, y, z]

record Dog = {name: String,}

record Dog = do
  name: String
end

class Dog do
  puts "stuff"
end

class Dog = do
  (Dog name) = { self.name = name; (puts name) }
  (Dog name) = do
    let self.name = name
  end
  fun (Dog name) = do
    let self.name = name
  end

  let bark = () => (puts "Woof!")

  (bark) = (puts "Woof!")

  fun (bark) = do
    puts "Woof!"
  end
end

class Dog = do
  fun (Dog name) = do
    let self.name = name
  end

  fun (Dog self.name self.breed)

  fun (bark) = (puts "Woof!")
end

let arr = [1, 2, 3]
let sum = 0
for i in 0..(len arr) do sum += arr.{i} end

arr.{0..10, @all, (-2)..@len}

fun (double x) = x * 2

fun (complicated_fn (...args)) = do
  puts "Computing complicated thing"
  call (complicated thing)
end

[1, 2, 3]
  |> map.[_ * 2]
  |> filter.[_ > 5]
  |> puts

module List = do

fun (list (...args)) = [(...args)]

end

---

import cpp showing: (type, fn, var)

type Dog = do
  fn (Dog name: String) = do
    var self.name = name
  end

  fn (Dog self.name self.breed)

  fn (bark) = (puts "Woof!")
end

---

import cpp showing: (runmain, argparse, lib, std)

runmain do
  argparse args = do
    (--filename) = (arg type: std.string help: "Filename to read")
    (-n) = (arg type: int help: "Number of lines to print")
    (--help) = "Prints the first `n` lines of a file"
  end

  (lib.file args.filename).lines
    |> [lib.take args.n]
    |> [std.for_each line => (l.puts line)]
end
