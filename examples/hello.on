import (..testing) ~as tests
import logging showing: (Logger ~as L, showLog ~as showL)
import logging.(Logger ~as L, showLog ~as showL)
import gravity showing: (..)
import gravity.(..)
import swimming hiding: water
import swimming.(..) hiding: water

let
  x = 3
  y = 4

nothing = nil

name = "John Smith"  # name
occupation = @farmer
num = 3e10
float = 3.0
int = 3i
float = bob
puts "Hello " * 3 + name; puts "Goodbye"

puts r'hello'
puts r"""hello"""

$(unquote)

puts "something ${(function call) + "thing" other.thing}!"

puts "call $(call thing)"

puts "name $three"
puts """hi $name"""

puts "call $@thing"

puts "num $3"

puts "num $''"

puts "partial call $[partial thing]"

puts 3; puts 4

(something else)
(something ~else thing)
(something
  (something, (something else))
  (something))
(-> something)

(something)
(something )
(something, else)
(~as)
complicated_array.{0..3, 1..(-1)}
complicated_array.{0..3, 1..@len, @all}

operator assoc: @left priority: 6 {~make} =
  (stuff)

fun (something else) =
  puts something
  puts "goodbye"

if thing ~and thing
  puts "Hello"

let Dog = (class Dog: self.name bark: () => (puts "Woof!"))

let Dog = (record name: String breed: Breed)

let arr = (list x y z)
let arr = [x, y, z]

record Dog = {name: String,}

record Dog =
  name: String

class Dog
  puts "stuff"

class Dog =
  (Dog name) = { self.name = name; (puts name) }

  (Dog name) =
    let self.name = name

  fun (Dog name) =
    let self.name = name

  let bark = () => (puts "Woof!")

  (bark) = (puts "Woof!")

  fun (bark) =
    puts "Woof!"

class Dog =
  fun (Dog name) =
    let self.name = name

  fun (Dog self.name self.breed)

  fun (bark) = (puts "Woof!")

fun (fn self.dog: Dog.{name, self.dog_breed}, Cat.{self.name, breed: self.cat_breed}) =
  nil

let arr = [1, 2, 3]
let sum = 0
for i in 0..(len arr) do sum += arr.{i} end

arr.{0..10, @all, (-2)..@len}

fun (double x) = x * 2

(x ~something else + 3 do: thing)

fun (complicated_fn (..args) (&&kwargs)) =
  puts "Computing complicated thing"
  call (complicated thing)

[1, 2, 3]
  |> [map _ * 2]
  |> [filter _ > 5]
  |> puts

train model
  xs: x_train
  ys: y_train
  l1: 1e-1
  alpha: 3e-4

module List =

  fun (list (..args)) = [(..args)]

---

import cpp showing: (type, fn, var)

type Dog =
  fn (Dog name: String) =
    var self.name = name

  fn (Dog self.name self.breed)

  fn (bark) = (puts "Woof!")

---

import cpp showing: (runmain, argparse, lib, std)

runmain
  argparse args =
    filename = (arg type: std.string help: "Filename to read" aliases: ((-f), (--file)))
    num = (arg type: int help: "Number of lines to print")
    help = "Prints the first `n` lines of a file"

  let lines = (lib.file args.filename)
  (lib.file args.filename).lines
    |> (lib.take args.n (..))
    |> (std.for_each line => (lib.puts line) (..))
