@@grammar :: Obsidian

@@eol_comments :: /#.*?$/

@@whitespace :: /[\t ]+/

@@parseinfo :: True

program = @:statement_list $ ;

statement_list = {eol | ';'} first:[statement] rest:{separated_statement} {eol | ';'} ;

separated_statement = {eol | ';'}+ @:statement ;

statement = head:block_expression args:{block_expression} ;

block = {eol} '{-INDENT-}' {eol} statements:statement_list {eol} '{-DEDENT-}' ;

block_expression = block_slurp ;

block_slurp = slurp:(binary_op)%{simple_expression | block}+ ;

expression = binary_slurp ;

binary_slurp = slurp:(binary_op)%{simple_expression}+ ;

binary_op = {eol} @:op {eol}
          | {eol} @:binary_identifier {eol}
          ;


TRAILER = /\[/ {eol} @:expression {eol} ']' ;

simple_expression = expr:atomic_expression trailers:{TRAILER} ;

atomic_expression =
                  | triple_single_string
                  | single_string
                  | triple_interpolated_string
                  | interpolated_string
                  | nonstring_expression
                  ;


simple_single_expression = expr:atomic_single_expression trailers:{TRAILER} ;


atomic_single_expression =
                  | triple_single_string
                  | single_string
                  | nonstring_expression
                  ;


nonstring_expression =
                  | identifier
                  | float
                  | integer
                  | symbol
                  | curly_expression
                  | call_expression
#                  | partial_call_expression
                  | tuple
                  | list
                  | map
                  | unquote_expression
                  ;

curly_expression_list = '{' {eol} (@+:op | @+:binary_identifier | @+:expression {{eol | ';'} @+:expression}) {eol} '}' ;
curly_expression = exprs:curly_expression_list ;

call_expression = '(' {eol} head:(expression | op) {eol} args:{call_expression_arg} {eol} ')' ;

# partial_call_expression = '[' {eol} head:(expression | op) {eol} args:{call_expression_arg} {eol} ']' ;

call_expression_arg = @:expression {eol} ;

tuple = '(' {eol} ')'
      | '(' {eol} first:expression {eol} ',' {eol} rest:[collection_rest] {eol} ')'
      ;


map = '{' {eol} '}'
    | '{' {eol} first:expression {eol} ',' {eol} rest:[collection_rest] {eol} '}'
    ;

list = '[' {eol}  contents:[collection_rest] {eol} ']' ;

collection_rest = @+:expression {{eol} ',' {eol} @+:expression} {eol} [','] ;

unquote_expression = '$' @:simple_expression ;

identifier = ident:/[_a-zA-Z][_a-zA-Z0-9]*[?!]?/ ;
binary_identifier = '~' ident:/[_a-zA-Z][_a-zA-Z0-9]*[?!]?/ ;
integer = val:/[0-9][_0-9]*([eE]-?[0-9][_0-9]*)?/ sigil:SIGIL ;
float = val:/[0-9][_0-9]*\.[0-9][_0-9]*([eE]-?[0-9][_0-9]*)?/ sigil:SIGIL ;
# triple_double_string = sigil:sigil val:TDS_VAL ;
# TDS_VAL = /"""([^"\\]|\\.|"([^"\\]|\\.)|""([^"\\]|\\.))*"""/ ;
triple_single_string = sigil:sigil val:TSS_VAL ;
TSS_VAL = /'''([^'\\]|\\.|'([^'\\]|\\.)|''([^'\\]|\\.))*'''/ ;
single_string = sigil:sigil val:SS_VAL ;
SS_VAL = /'([^'\\]|\\.)*'/ ;
symbol = '@' symbol:/[_a-zA-Z][_a-zA-Z0-9]*[?!]?/ ;

sigil = [/[a-zA-Z]+/] ;
SIGIL = [/[a-zA-Z]+/] ;

eol = '\n' ;

interpolated_string = sigil:sigil bodies:INTERPOLATED_BODIES ;
INTERPOLATED_BODIES = /"/ @:{STRING_BODY | INTERPOLATED_BODY} /"/;
INTERPOLATED_BODY = /\$/ @:simple_single_expression ;
STRING_BODY = body:/([^"\\$]|\\.)+/ ;

triple_interpolated_string = sigil:sigil bodies:TINTERPOLATED_BODIES ;
TINTERPOLATED_BODIES = /"""/ @:{TSTRING_BODY | TINTERPOLATED_BODY} /"""/;
TINTERPOLATED_BODY = /\$/ @:simple_single_expression ;
TSTRING_BODY = body:/([^"\\$]|\\.|"(?=[^"\\]|\\.)|""(?=[^"\\]|\\.))+/ ;

op = op:/[+\-=\/*&|^%!?<>.:]+/ ;
