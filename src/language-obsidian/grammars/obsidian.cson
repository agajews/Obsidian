# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

scopeName: 'source.obsidian'
name: 'Obsidian' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'on'
]
patterns: [
  {
    match: '(^|;)[ \t]*([_a-zA-Z][_a-zA-Z0-9]*[?!]?)([ \t]*[+\\-=/*&|^%!<>.:]+[ \t]*[_a-zA-Z][_a-zA-Z0-9]*[?!]?)*([ \t]+(?=[^+\\-=/*&|^%!<>.:,\\s]))'
    captures:
      2: name: 'keyword.call.obsidian'
      3: name: 'keyword.call.obsidian'
      # 4: name: 'test.string.obsidian'
  }
  {
    begin: '(^|;)[ \t]*\\([ \t]*(~?[_a-zA-Z][_a-zA-Z0-9]*[?!]?|[+\\-=/*&|^%!<>.:]+)([ \t]*[+\\-=/*&|^%!<>.:]+[ \t]*[_a-zA-Z][_a-zA-Z0-9]*[?!]?)*(?=([ \t]+[^,~\\s])|([ \t]*\\))|([^,]*(\\)|)))'
    beginCaptures:
      2: name: 'entity.name.function.obsidian'
      3: name: 'entity.name.function.obsidian'
    end: '\\)(([ \t]*[+\\-=/*&|^%!<>.:]+[ \t]*[_a-zA-Z][_a-zA-Z0-9]*[?!]?)+([ \t]+(?=[^+\\-=/*&|^%!<>.:,\\s])))?'
    endCaptures:
      1: name: 'keyword.call.obsidian'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '#call'
      }
      {
        include: '#partial_call'
      }
      {
        include: '#collection'
      }
    ]
  }
  {
    include: '#call'
  }
  {
    include: '#partial_call'
  }
  {
    include: '#collection'
  }
  {
    include: '#constants'
  }
  {
    include: '#comment'
  }
]

repository:
  float:
    match: '([0-9][_0-9]*\\.[0-9][_0-9]*([eE][0-9][_0-9]*)?)'
    name: 'constant.numeric.obsidian'
  int:
    match: '([0-9][_0-9]*([eE][0-9][_0-9]*)?)'
    name: 'constant.numeric.obsidian'
  triple_double_string:
    begin: '"""'
    beginCaptures:
      0: name: 'string.quoted.triple.obsidian'
    patterns: [
      {
        match: '[^"\\\\]+'
        name: 'string.quoted.triple.obsidian'
      }
      {
        match: '\\\\.'
        name: 'constant.character.escape'
      }
      {
        match: '"{1,2}(?!")'
        name: 'string.quoted.triple.obsidian'
      }
    ]
    end: '"""'
    endCaptures:
      0: name: 'string.quoted.triple.obsidian'
  triple_single_string:
    begin: "'''"
    beginCaptures:
      0: name: 'string.quoted.triple.obsidian'
    patterns: [
      {
        match: "[^'\\\\]+"
        name: 'string.quoted.triple.obsidian'
      }
      {
        match: '\\\\.'
        name: 'constant.character.escape'
      }
      {
        match: "'{1,2}(?!')"
        name: 'string.quoted.triple.obsidian'
      }
    ]
    end: "'''"
    endCaptures:
      0: name: 'string.quoted.triple.obsidian'
  double_string:
    begin: '"'
    beginCaptures:
      0: name: 'string.quoted.double.obsidian'
    patterns: [
      {
        begin: '{'
        patterns: [
          {
            include: '#constants'
          }
          {
            include: '#call'
          }
        ]
        end: '}'
      }
      {
        match: '[^"\\\\{}]+'
        name: 'string.quoted.double.obsidian'
      }
      {
        match: '\\\\.'
        name: 'constant.character.escape'
      }
    ]
    end: '"'
    endCaptures:
      0: name: 'string.quoted.double.obsidian'
  single_string:
    begin: "'"
    beginCaptures:
      0: name: 'string.quoted.single.obsidian'
    patterns: [
      {
        match: "[^'\\\\]+"
        name: 'string.quoted.single.obsidian'
      }
      {
        match: '\\\\.'
        name: 'constant.character.escape'
      }
    ]
    end: "'"
    endCaptures:
      1: name: 'string.quoted.single.obsidian'
  keyword:
    match: '(do|end)'
    name: 'keyword.control.obsidian'
  symbol:
    match: '(@[_a-zA-Z][_a-zA-Z0-9]*[?!]?)'
    name: 'constant.other.obsidian'
  binary_ident:
    match: '(~[_a-zA-Z][_a-zA-Z0-9]*[?!]?)'
    name: 'keyword.other.obsidian'
  comment:
    match: '(#.*?$)'
    name: 'comment.line.obsidian'
  lang_const:
    match: '(true|false|nil)'
    name: 'constant.language.obsidian'
  ident:
    match: '([_a-zA-Z][_a-zA-Z0-9]*[?!]?)'
    name: 'identifier.obsidian'
  self:
    match: 'self'
    name: 'variable.language'
  kwarg:
    match: '([_a-zA-Z][_a-zA-Z0-9]*[?!]?[ \t]*:)'
    name: 'entity.name.tag.obsidian'
  unquote:
    match: '\\$[ \t]*([_a-zA-Z][_a-zA-Z0-9]*[?!]?)?'
    name: 'entity.name.tag.obsidian'

  constants:
    patterns: [
      {
        include: '#float'
      }
      {
        include: '#int'
      }
      {
        include: '#triple_double_string'
      }
      {
        include: '#triple_single_string'
      }
      {
        include: '#double_string'
      }
      {
        include: '#single_string'
      }
      {
        include: '#symbol'
      }
      {
        include: '#binary_ident'
      }
      {
        include: '#keyword'
      }
      {
        include: '#lang_const'
      }
      {
        include: '#kwarg'
      }
      {
        include: '#self'
      }
      {
        include: '#ident'
      }
      {
        include: '#unquote'
      }
    ]

  call:
    begin: '\\([ \t]*(~?[_a-zA-Z][_a-zA-Z0-9]*[?!]?|[+\\-=/*&|^%!<>.:]+)([ \t]*[+\\-=/*&|^%!<>.:]+[ \t]*[_a-zA-Z][_a-zA-Z0-9]*[?!]?)*(?=([ \t]+[^+\\-=/*&|^%!<>.:,~\\s])|([ \t]*\\))|([^,]*(\\)|$)))'
    beginCaptures:
      1: name: 'entity.name.function.obsidian'
      2: name: 'entity.name.function.obsidian'
    end: '\\)'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '$self'
      }
      {
        include: '#partial_call'
      }
      {
        include: '#collection'
      }
    ]

  partial_call:
    begin: '\\[[ \t]*(~?[_a-zA-Z][_a-zA-Z0-9]*[?!]?|[+\\-=/*&|^%!<>.:]+)([ \t]*[+\\-=/*&|^%!<>.:]+[ \t]*[_a-zA-Z][_a-zA-Z0-9]*[?!]?)*(?=([ \t]+[^+\\-=/*&|^%!<>.:,~\\s])|([ \t]*\\])|([^,]*(\\]|$)))'
    beginCaptures:
      1: name: 'constant.language.partial_call.obsidian'
      2: name: 'constant.language.partial_call.obsidian'
    end: '\\]'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '$self'
      }
      {
        include: '#call'
      }
      {
        include: '#collection'
      }
    ]

  curly:
    begin: '\\{'
    end: '\\}'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '#call'
      }
      {
        include: '#partial_call'
      }
      {
        include: '#collection'
      }
    ]

  square:
    begin: '\\['
    end: '\\]'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '#call'
      }
      {
        include: '#partial_call'
      }
      {
        include: '#collection'
      }
    ]

  tuple:
    begin: '\\('
    end: '\\)'
    patterns: [
      {
        include: '#constants'
      }
      {
        include: '#comment'
      }
      {
        include: '#call'
      }
      {
        include: '#partial_call'
      }
      {
        include: '#collection'
      }
    ]

  collection:
    patterns: [
      {
        include: '#curly'
      }
      {
        include: '#square'
      }
      {
        include: '#tuple'
      }
    ]
