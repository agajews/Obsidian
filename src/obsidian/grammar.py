#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'do',
    'end',
}  # type: ignore


class ObsidianBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(ObsidianBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class ObsidianParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('[\\t ]+'),
        nameguard=None,
        comments_re=None,
        eol_comments_re='#.*?$',
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=ObsidianBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(ObsidianParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _program_(self):  # noqa
        self._statement_list_()
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _statement_list_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._eol_()
                with self._option():
                    self._token(';')
                self._error('no available options')
        self._closure(block0)
        with self._optional():
            self._statement_()
        self.name_last_node('first')

        def block4():
            self._separated_statement_()
        self._closure(block4)
        self.name_last_node('rest')

        def block5():
            with self._choice():
                with self._option():
                    self._eol_()
                with self._option():
                    self._token(';')
                self._error('no available options')
        self._closure(block5)
        self.ast._define(
            ['first', 'rest'],
            []
        )

    @tatsumasu()
    def _separated_statement_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._eol_()
                with self._option():
                    self._token(';')
                self._error('no available options')
        self._positive_closure(block0)
        self._statement_()
        self.name_last_node('@')

    @tatsumasu()
    def _statement_(self):  # noqa
        self._expression_()
        self.name_last_node('head')

        def block2():
            self._expression_()
        self._closure(block2)
        self.name_last_node('args')
        self.ast._define(
            ['args', 'head'],
            []
        )

    @tatsumasu()
    def _block_(self):  # noqa
        self._token('do')
        self._statement_list_()
        self.name_last_node('@')
        self._token('end')

    @tatsumasu()
    def _expression_(self):  # noqa
        self._binary_slurp_()

    @tatsumasu()
    def _binary_slurp_(self):  # noqa

        def sep0():
            with self._group():
                self._binary_op_()

        def block0():
            self._simple_expression_()
        self._positive_join(block0, sep0)

    @tatsumasu()
    def _binary_op_(self):  # noqa
        with self._choice():
            with self._option():

                def block0():
                    self._eol_()
                self._closure(block0)
                self._op_()
                self.name_last_node('@')

                def block2():
                    self._eol_()
                self._closure(block2)
            with self._option():

                def block3():
                    self._eol_()
                self._closure(block3)
                self._binary_identifier_()
                self.name_last_node('@')

                def block5():
                    self._eol_()
                self._closure(block5)
            self._error('no available options')

    @tatsumasu()
    def _simple_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._atom_()
            with self._option():
                self._token('{')

                def block0():
                    self._eol_()
                self._closure(block0)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._expression_()
                        with self._option():
                            self._op_()
                        self._error('no available options')
                self.name_last_node('@')

                def block3():
                    self._eol_()
                self._closure(block3)
                self._token('}')
            with self._option():
                self._call_expression_()
            with self._option():
                self._tuple_()
            with self._option():
                self._list_()
            with self._option():
                self._map_()
            with self._option():
                self._block_()
            self._error('no available options')

    @tatsumasu()
    def _call_expression_(self):  # noqa
        self._token('(')

        def block0():
            self._eol_()
        self._closure(block0)
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._op_()
                self._error('no available options')
        self.name_last_node('head')

        def block3():
            self._eol_()
        self._closure(block3)

        def block5():
            self._call_expression_args_()
        self._closure(block5)
        self.name_last_node('args')

        def block6():
            self._eol_()
        self._closure(block6)
        self._token(')')
        self.ast._define(
            ['args', 'head'],
            []
        )

    @tatsumasu()
    def _call_expression_args_(self):  # noqa
        self._expression_()
        self.name_last_node('@')

        def block1():
            self._eol_()
        self._closure(block1)

    @tatsumasu()
    def _partial_call_expression_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._expression_()
                with self._option():
                    self._op_()
                self._error('no available options')
        self.name_last_node('head')

        def block2():
            self._eol_()
        self._closure(block2)

        def block4():
            self._call_expression_args_()
        self._closure(block4)
        self.name_last_node('args')
        self.ast._define(
            ['args', 'head'],
            []
        )

    @tatsumasu()
    def _tuple_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')

                def block0():
                    self._eol_()
                self._closure(block0)
                self._token(')')
            with self._option():
                self._token('(')
                self._partial_call_expression_()
                self.name_last_node('first')

                def block2():
                    self._eol_()
                self._closure(block2)
                self._token(',')

                def block3():
                    self._eol_()
                self._closure(block3)

                def sep5():
                    with self._group():

                        def block6():
                            self._eol_()
                        self._closure(block6)
                        self._token(',')

                        def block7():
                            self._eol_()
                        self._closure(block7)

                def block5():
                    self._partial_call_expression_()
                self._gather(block5, sep5)
                self.name_last_node('rest')
                self._token(')')
            self._error('no available options')
        self.ast._define(
            ['first', 'rest'],
            []
        )

    @tatsumasu()
    def _list_(self):  # noqa
        self._token('[')

        def block0():
            self._eol_()
        self._closure(block0)

        def sep2():
            with self._group():

                def block3():
                    self._eol_()
                self._closure(block3)
                self._token(',')

                def block4():
                    self._eol_()
                self._closure(block4)

        def block2():
            self._partial_call_expression_()
        self._gather(block2, sep2)
        self.name_last_node('@')
        self._token(']')

    @tatsumasu()
    def _map_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('{')

                def block0():
                    self._eol_()
                self._closure(block0)
                self._token('}')
            with self._option():
                self._token('{')
                self._partial_call_expression_()
                self.name_last_node('first')

                def block2():
                    self._eol_()
                self._closure(block2)
                self._token(',')

                def block3():
                    self._eol_()
                self._closure(block3)

                def sep5():
                    with self._group():

                        def block6():
                            self._eol_()
                        self._closure(block6)
                        self._token(',')

                        def block7():
                            self._eol_()
                        self._closure(block7)

                def block5():
                    self._partial_call_expression_()
                self._gather(block5, sep5)
                self.name_last_node('rest')
                self._token('}')
            self._error('no available options')
        self.ast._define(
            ['first', 'rest'],
            []
        )

    @tatsumasu()
    def _op_(self):  # noqa
        self._pattern(r'[+\-=\/*&|^%!<>.:]+')

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._float_()
            with self._option():
                self._integer_()
            with self._option():
                self._double_string_()
            with self._option():
                self._single_string_()
            with self._option():
                self._symbol_()
            self._error('no available options')

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._pattern(r'[_a-zA-Z$][_a-zA-Z0-9]*[?]?')
        self._check_name()

    @tatsumasu()
    def _binary_identifier_(self):  # noqa
        self._token('~')
        self._pattern(r'[_a-zA-Z][_a-zA-Z0-9]*[?]?')
        self.name_last_node('@')

    @tatsumasu()
    def _integer_(self):  # noqa
        self._pattern(r'-?[0-9]+')

    @tatsumasu()
    def _float_(self):  # noqa
        self._pattern(r'-?[0-9]+\.[0-9]+')

    @tatsumasu()
    def _double_string_(self):  # noqa
        self._pattern(r'"([^"\\]|\\.)*"')

    @tatsumasu()
    def _single_string_(self):  # noqa
        self._pattern(r"'([^'\\]|\\.)*'")

    @tatsumasu()
    def _symbol_(self):  # noqa
        self._token('@')
        self._pattern(r'[_a-zA-Z][_a-zA-Z0-9]*[?]?')
        self.name_last_node('@')

    @tatsumasu()
    def _eol_(self):  # noqa
        self._token('\n')


class ObsidianSemantics(object):
    def program(self, ast):  # noqa
        return ast

    def statement_list(self, ast):  # noqa
        return ast

    def separated_statement(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def block(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def binary_slurp(self, ast):  # noqa
        return ast

    def binary_op(self, ast):  # noqa
        return ast

    def simple_expression(self, ast):  # noqa
        return ast

    def call_expression(self, ast):  # noqa
        return ast

    def call_expression_args(self, ast):  # noqa
        return ast

    def partial_call_expression(self, ast):  # noqa
        return ast

    def tuple(self, ast):  # noqa
        return ast

    def list(self, ast):  # noqa
        return ast

    def map(self, ast):  # noqa
        return ast

    def op(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def binary_identifier(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def float(self, ast):  # noqa
        return ast

    def double_string(self, ast):  # noqa
        return ast

    def single_string(self, ast):  # noqa
        return ast

    def symbol(self, ast):  # noqa
        return ast

    def eol(self, ast):  # noqa
        return ast


def main(filename, start='program', **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = ObsidianParser()
    return parser.parse(text, start=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, ObsidianParser, name='Obsidian')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
