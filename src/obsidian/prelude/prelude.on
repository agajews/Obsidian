(get_attr prim 'let') '.' ((get_attr prim 'Fun') 'prelude.{.}'
  ((get_attr prim 'let') 'let' (get_attr prim 'let'))
  (let 'eval' (get_attr (get_attr (get_attr meta 'caller') 'meta') 'eval'))
  (let 'is_instance' (get_attr prim 'is_instance'))
  (let 'lhs' ((get_attr (get_attr meta 'args') 'get') 0))
  (let 'rhs' ((get_attr (get_attr meta 'args') 'get') 1))
  ((get_attr (eval lhs) 'dot') (get_attr meta 'caller') rhs))

set_attr {.} 'precedence' 10

prim.let 'is' prim.is
prim.let 'is_instance' prim.is_instance
prim.let 'type' prim.type
prim.let 'and' prim.bool.and
prim.let 'or' prim.bool.or
prim.let 'ast' prim.ast
prim.let 'do' prim.do

prim.let 'let' (prim.Fun 'prelude.let'
  (prim.let 'caller' meta.caller)
  (prim.let 'ceval' (get_attr meta.caller.meta 'eval'))
  (prim.let 'lval' meta.args.[0].args.[0])
  (prim.let 'rval' (ceval meta.args.[0].args.[1]))
  (prim.let 'let_recursive' (prim.Fun 'let_recursive'
    (prim.let 'eval' meta.caller.meta.eval)
    (prim.let 'lval' (eval meta.args.[0]))
    (prim.let 'rval' (eval meta.args.[1]))
    (prim.cond
      (lval ~is_instance ast.Ident, (set_attr caller lval.ident rval))
      (lval ~is_instance ast.Call, [
        (prim.cond
          ((eval lval.callable) ~is {.} ~and (prim.int.eq (lval.args.len) 2) ~and lval.args.[1] ~is_instance ast.Ident,
            (set_attr (ceval lval.args.[0]) lval.args.[1].ident rval))
          (true, (prim.panic "Fun `prelude.let` received invalid lval `$lval`"))),
      ])
      (lval ~is_instance ast.Tuple ~or lval ~is_instance ast.List, (do
        (prim.let 'i' 0)
        (prim.while (prim.int.lt i (lval.elems.len))
          (let_recursive lval.elems.[i] rval.[i])
          (prim.assign 'i' (prim.int.add i 1)))))
      (true, (prim.panic "Fun `prelude.let` received invalid lval `$lval`"))
    )))
  (let_recursive lval rval))

prim.let '=' (prim.Fun 'prelude.assign'
  # TODO
  (puts 'pass'))
