(get_attr prim 'let') '.' ((get_attr prim 'Fun') 'prelude.{.}' [
  ((get_attr prim 'let') 'let' (get_attr prim 'let')),
  (let 'eval' (get_attr (get_attr (get_attr meta 'caller') 'meta') 'eval')),
  (let 'is_instance' (get_attr prim 'is_instance')),
  (let 'lhs' ((get_attr (get_attr meta 'args') 'get') 0)),
  (let 'rhs' ((get_attr (get_attr meta 'args') 'get') 1)),
  ((get_attr (eval lhs) 'dot') rhs),
])

prim.let 'let' (prim.Fun 'prelude.let' [
  (prim.let 'caller' meta.caller),
  (prim.let 'eval' (get_attr meta.caller.meta 'eval')),
  (prim.let 'lval' ((meta.args.get 0).args.get 0)),
  (prim.let 'rval' (eval ((meta.args.get 0).args.get 1))),
  (prim.let 'and' prim.bool.and),
  (prim.let 'let_recursive' (prim.Fun 'let_recursive' [
    (prim.let 'eval' meta.caller.meta.eval),
    (prim.let 'lval' (eval (meta.args.get 0))),
    (prim.let 'rval' (eval (meta.args.get 1))),
    (prim.cond
      ((prim.is_instance lval prim.ast.Ident), [(set_attr caller lval.ident rval)])
      # (lval.meta.type ~is prim.ast.Call ~and lval.callable, ),
    ),
  ])),
  (let_recursive lval rval)
])

prim.let '=' (prim.Fun 'prelude.assign' [
  # TODO
  (puts 'pass'),
])
